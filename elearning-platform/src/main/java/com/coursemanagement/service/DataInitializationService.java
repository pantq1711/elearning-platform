package com.coursemanagement.service;

import com.coursemanagement.entity.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * Service ƒë·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng
 * T·ª± ƒë·ªông ch·∫°y sau khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông ho√†n t·∫•t
 */
@Service
@Transactional
public class DataInitializationService {

    @Autowired
    private UserService userService;

    @Autowired
    private CategoryService categoryService;

    @Autowired
    private CourseService courseService;

    @Autowired
    private LessonService lessonService;

    @Autowired
    private QuizService quizService;

    @Autowired
    private EnrollmentService enrollmentService;

    /**
     * Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u sau khi ·ª©ng d·ª•ng s·∫µn s√†ng
     * Ch·ªâ ch·∫°y khi database tr·ªëng ho·∫∑c thi·∫øu d·ªØ li·ªáu c∆° b·∫£n
     */
    @EventListener(ApplicationReadyEvent.class)
    public void initializeSampleData() {
        try {
            System.out.println("üîÑ ƒêang ki·ªÉm tra v√† kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u...");

            // T·∫°o users m·∫´u
            createSampleUsers();

            // T·∫°o kh√≥a h·ªçc m·∫´u
            createSampleCourses();

            // T·∫°o b√†i gi·∫£ng m·∫´u
            createSampleLessons();

            // T·∫°o quiz m·∫´u
            createSampleQuizzes();

            // T·∫°o ƒëƒÉng k√Ω m·∫´u
            createSampleEnrollments();

            System.out.println("‚úÖ Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u ho√†n t·∫•t!");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u: " + e.getMessage());
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng crash ·ª©ng d·ª•ng
        }
    }

    /**
     * T·∫°o users m·∫´u (instructor v√† student)
     */
    private void createSampleUsers() {
        try {
            // Ki·ªÉm tra ƒë√£ c√≥ instructor n√†o ch∆∞a
            List<User> instructors = userService.findByRole(User.Role.INSTRUCTOR);
            if (instructors.isEmpty()) {

                // T·∫°o instructors m·∫´u
                String[][] instructorData = {
                        {"instructor1", "instructor123", "instructor1@example.com", "Nguy·ªÖn VƒÉn A"},
                        {"instructor2", "instructor123", "instructor2@example.com", "Tr·∫ßn Th·ªã B"},
                        {"instructor3", "instructor123", "instructor3@example.com", "L√™ VƒÉn C"}
                };

                for (String[] data : instructorData) {
                    if (!userService.existsByUsername(data[0])) {
                        User instructor = new User();
                        instructor.setUsername(data[0]);
                        instructor.setPassword(data[1]);
                        instructor.setEmail(data[2]);
                        instructor.setRole(User.Role.INSTRUCTOR);
                        instructor.setActive(true);

                        userService.createUser(instructor);
                    }
                }

                System.out.println("‚úÖ ƒê√£ t·∫°o " + instructorData.length + " t√†i kho·∫£n instructor m·∫´u");
            }

            // Ki·ªÉm tra ƒë√£ c√≥ student n√†o ch∆∞a
            List<User> students = userService.findByRole(User.Role.STUDENT);
            if (students.size() < 5) {

                // T·∫°o students m·∫´u
                String[][] studentData = {
                        {"student1", "student123", "student1@example.com"},
                        {"student2", "student123", "student2@example.com"},
                        {"student3", "student123", "student3@example.com"},
                        {"student4", "student123", "student4@example.com"},
                        {"student5", "student123", "student5@example.com"}
                };

                for (String[] data : studentData) {
                    if (!userService.existsByUsername(data[0])) {
                        User student = new User();
                        student.setUsername(data[0]);
                        student.setPassword(data[1]);
                        student.setEmail(data[2]);
                        student.setRole(User.Role.STUDENT);
                        student.setActive(true);

                        userService.createUser(student);
                    }
                }

                System.out.println("‚úÖ ƒê√£ t·∫°o " + studentData.length + " t√†i kho·∫£n student m·∫´u");
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o users m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o kh√≥a h·ªçc m·∫´u
     */
    private void createSampleCourses() {
        try {
            // Ki·ªÉm tra ƒë√£ c√≥ kh√≥a h·ªçc n√†o ch∆∞a
            if (courseService.countAllCourses() > 0) {
                return;
            }

            List<User> instructors = userService.findByRole(User.Role.INSTRUCTOR);
            List<Category> categories = categoryService.findAll();

            if (instructors.isEmpty() || categories.isEmpty()) {
                return;
            }

            // D·ªØ li·ªáu kh√≥a h·ªçc m·∫´u
            String[][] courseData = {
                    {"L·∫≠p tr√¨nh Java c∆° b·∫£n", "H·ªçc l·∫≠p tr√¨nh Java t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, bao g·ªìm OOP v√† c√°c framework ph·ªï bi·∫øn.", "L·∫≠p tr√¨nh"},
                    {"Thi·∫øt k·∫ø UI/UX v·ªõi Figma", "T√¨m hi·ªÉu c√°c nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX v√† th·ª±c h√†nh v·ªõi c√¥ng c·ª• Figma chuy√™n nghi·ªáp.", "Thi·∫øt k·∫ø"},
                    {"Digital Marketing to√†n di·ªán", "Kh√≥a h·ªçc marketing s·ªë t·ª´ A-Z, bao g·ªìm SEO, SEM, Social Media Marketing v√† Analytics.", "Marketing"},
                    {"Ti·∫øng Anh giao ti·∫øp c∆° b·∫£n", "Kh√≥a h·ªçc ti·∫øng Anh giao ti·∫øp h√†ng ng√†y, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.", "Ngo·∫°i ng·ªØ"},
                    {"Qu·∫£n l√Ω d·ª± √°n v·ªõi Agile", "H·ªçc c√°c ph∆∞∆°ng ph√°p qu·∫£n l√Ω d·ª± √°n hi·ªán ƒë·∫°i, t·∫≠p trung v√†o Agile v√† Scrum.", "Kinh doanh"},
                    {"K·ªπ nƒÉng thuy·∫øt tr√¨nh hi·ªáu qu·∫£", "Ph√°t tri·ªÉn k·ªπ nƒÉng thuy·∫øt tr√¨nh v√† giao ti·∫øp tr∆∞·ªõc ƒë√°m ƒë√¥ng m·ªôt c√°ch t·ª± tin.", "K·ªπ nƒÉng m·ªÅm"}
            };

            for (int i = 0; i < courseData.length; i++) {
                String[] data = courseData[i];

                // T√¨m category theo t√™n
                Optional<Category> categoryOpt = categories.stream()
                        .filter(cat -> cat.getName().equals(data[2]))
                        .findFirst();

                if (categoryOpt.isPresent()) {
                    Course course = new Course();
                    course.setName(data[0]);
                    course.setDescription(data[1]);
                    course.setCategory(categoryOpt.get());
                    course.setInstructor(instructors.get(i % instructors.size()));
                    course.setActive(true);

                    courseService.createCourse(course);
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o " + courseData.length + " kh√≥a h·ªçc m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o kh√≥a h·ªçc m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o b√†i gi·∫£ng m·∫´u
     */
    private void createSampleLessons() {
        try {
            List<Course> courses = courseService.findAllActiveCourses();

            if (courses.isEmpty()) {
                return;
            }

            // T·∫°o 3-5 b√†i gi·∫£ng cho m·ªói kh√≥a h·ªçc
            for (Course course : courses) {
                if (lessonService.countActiveLessonsByCourse(course) > 0) {
                    continue; // ƒê√£ c√≥ b√†i gi·∫£ng r·ªìi
                }

                String courseName = course.getName();
                String[][] lessonData;

                if (courseName.contains("Java")) {
                    lessonData = new String[][]{
                            {"Gi·ªõi thi·ªáu v·ªÅ Java", "T·ªïng quan v·ªÅ ng√¥n ng·ªØ l·∫≠p tr√¨nh Java, l·ªãch s·ª≠ v√† ·ª©ng d·ª•ng.", "https://www.youtube.com/watch?v=eIrMbAQSU34"},
                            {"C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ph√°t tri·ªÉn", "H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t JDK v√† IDE cho vi·ªác l·∫≠p tr√¨nh Java.", null},
                            {"Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu", "T√¨m hi·ªÉu v·ªÅ c√°c ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n v√† c√°ch khai b√°o bi·∫øn.", "https://www.youtube.com/watch?v=YEhDbWaKAXM"},
                            {"C·∫•u tr√∫c ƒëi·ªÅu khi·ªÉn", "H·ªçc v·ªÅ if-else, switch-case, v√≤ng l·∫∑p for, while trong Java.", null},
                            {"L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng", "Gi·ªõi thi·ªáu c√°c kh√°i ni·ªám OOP: Class, Object, Inheritance, Polymorphism.", "https://www.youtube.com/watch?v=Cr_U6DyWtWM"}
                    };
                } else if (courseName.contains("UI/UX")) {
                    lessonData = new String[][]{
                            {"Nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX", "T√¨m hi·ªÉu c√°c nguy√™n t·∫Øc c∆° b·∫£n trong thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng.", null},
                            {"Gi·ªõi thi·ªáu Figma", "L√†m quen v·ªõi giao di·ªán v√† c√°c c√¥ng c·ª• c∆° b·∫£n c·ªßa Figma.", "https://www.youtube.com/watch?v=FTlczfBm7bk"},
                            {"Thi·∫øt k·∫ø Wireframe", "H·ªçc c√°ch t·∫°o wireframe v√† prototype cho ·ª©ng d·ª•ng mobile.", null},
                            {"Color Theory v√† Typography", "T√¨m hi·ªÉu v·ªÅ l√Ω thuy·∫øt m√†u s·∫Øc v√† c√°ch ch·ªçn font ch·ªØ ph√π h·ª£p.", null}
                    };
                } else {
                    // B√†i gi·∫£ng chung cho c√°c kh√≥a h·ªçc kh√°c
                    lessonData = new String[][]{
                            {"B√†i 1: Gi·ªõi thi·ªáu kh√≥a h·ªçc", "T·ªïng quan v·ªÅ n·ªôi dung v√† m·ª•c ti√™u c·ªßa kh√≥a h·ªçc.", null},
                            {"B√†i 2: Ki·∫øn th·ª©c c∆° b·∫£n", "Nh·ªØng ki·∫øn th·ª©c n·ªÅn t·∫£ng c·∫ßn thi·∫øt cho kh√≥a h·ªçc.", null},
                            {"B√†i 3: Th·ª±c h√†nh ƒë·∫ßu ti√™n", "B√†i t·∫≠p th·ª±c h√†nh ƒë·∫ßu ti√™n ƒë·ªÉ l√†m quen v·ªõi n·ªôi dung.", null},
                            {"B√†i 4: N√¢ng cao k·ªπ nƒÉng", "Ph√°t tri·ªÉn k·ªπ nƒÉng ·ªü m·ª©c ƒë·ªô n√¢ng cao h∆°n.", null}
                    };
                }

                for (int i = 0; i < lessonData.length; i++) {
                    Lesson lesson = new Lesson();
                    lesson.setTitle(lessonData[i][0]);
                    lesson.setContent(lessonData[i][1]);
                    lesson.setVideoLink(lessonData[i][2]);
                    lesson.setCourse(course);
                    lesson.setOrderIndex(i + 1);
                    lesson.setActive(true);

                    lessonService.createLesson(lesson);
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o b√†i gi·∫£ng m·∫´u cho t·∫•t c·∫£ kh√≥a h·ªçc");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o b√†i gi·∫£ng m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o quiz m·∫´u
     */
    private void createSampleQuizzes() {
        try {
            List<Course> courses = courseService.findAllActiveCourses();

            if (courses.isEmpty()) {
                return;
            }

            // T·∫°o 1-2 quiz cho m·ªói kh√≥a h·ªçc
            for (Course course : courses) {
                if (quizService.countActiveQuizzesByCourse(course) > 0) {
                    continue; // ƒê√£ c√≥ quiz r·ªìi
                }

                // T·∫°o quiz gi·ªØa kh√≥a
                Quiz midQuiz = new Quiz();
                midQuiz.setTitle("Ki·ªÉm tra gi·ªØa kh√≥a - " + course.getName());
                midQuiz.setDescription("B√†i ki·ªÉm tra ƒë√°nh gi√° ki·∫øn th·ª©c gi·ªØa kh√≥a h·ªçc");
                midQuiz.setDuration(30); // 30 ph√∫t
                midQuiz.setMaxScore(100.0);
                midQuiz.setPassScore(60.0);
                midQuiz.setCourse(course);
                midQuiz.setActive(true);

                Quiz createdMidQuiz = quizService.createQuiz(midQuiz);

                // Th√™m c√¢u h·ªèi cho quiz gi·ªØa kh√≥a
                createSampleQuestions(createdMidQuiz, "gi·ªØa kh√≥a");

                // T·∫°o quiz cu·ªëi kh√≥a
                Quiz finalQuiz = new Quiz();
                finalQuiz.setTitle("Ki·ªÉm tra cu·ªëi kh√≥a - " + course.getName());
                finalQuiz.setDescription("B√†i ki·ªÉm tra t·ªïng k·∫øt to√†n b·ªô kh√≥a h·ªçc");
                finalQuiz.setDuration(45); // 45 ph√∫t
                finalQuiz.setMaxScore(100.0);
                finalQuiz.setPassScore(70.0);
                finalQuiz.setCourse(course);
                finalQuiz.setActive(true);

                Quiz createdFinalQuiz = quizService.createQuiz(finalQuiz);

                // Th√™m c√¢u h·ªèi cho quiz cu·ªëi kh√≥a
                createSampleQuestions(createdFinalQuiz, "cu·ªëi kh√≥a");
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o quiz m·∫´u cho t·∫•t c·∫£ kh√≥a h·ªçc");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o quiz m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o c√¢u h·ªèi m·∫´u cho quiz
     */
    private void createSampleQuestions(Quiz quiz, String type) {
        try {
            String courseName = quiz.getCourse().getName();
            String[][] questionData;

            if (courseName.contains("Java")) {
                questionData = new String[][]{
                        {"Java l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh thu·ªôc lo·∫°i n√†o?", "Ng√¥n ng·ªØ m√°y", "Ng√¥n ng·ªØ b·∫≠c cao", "Ng√¥n ng·ªØ assembly", "Ng√¥n ng·ªØ k·ªãch b·∫£n", "B"},
                        {"T·ª´ kh√≥a n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k·∫ø th·ª´a trong Java?", "implements", "extends", "inherits", "super", "B"},
                        {"Ph∆∞∆°ng th·ª©c main() trong Java c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?", "Private v√† static", "Public v√† dynamic", "Public v√† static", "Protected v√† final", "C"},
                        {"JVM vi·∫øt t·∫Øt c·ªßa c·ª•m t·ª´ n√†o?", "Java Virtual Machine", "Java Variable Method", "Java Version Manager", "Java Visual Mode", "A"},
                        {"Ki·ªÉu d·ªØ li·ªáu n√†o sau ƒë√¢y l√† ki·ªÉu nguy√™n th·ªßy trong Java?", "String", "ArrayList", "int", "Scanner", "C"}
                };
            } else if (courseName.contains("UI/UX")) {
                questionData = new String[][]{
                        {"UX vi·∫øt t·∫Øt c·ªßa c·ª•m t·ª´ n√†o?", "User Experience", "User Extension", "Unique Experience", "Universal Extension", "A"},
                        {"Wireframe trong thi·∫øt k·∫ø UI/UX l√† g√¨?", "M√†u s·∫Øc c·ªßa giao di·ªán", "B·∫£n ph√°c th·∫£o khung giao di·ªán", "Font ch·ªØ ƒë∆∞·ª£c s·ª≠ d·ª•ng", "Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông", "B"},
                        {"Nguy√™n t·∫Øc n√†o quan tr·ªçng nh·∫•t trong thi·∫øt k·∫ø UI?", "M√†u s·∫Øc ƒë·∫πp", "Nhi·ªÅu hi·ªáu ·ª©ng", "D·ªÖ s·ª≠ d·ª•ng", "Font ch·ªØ l·∫°", "C"},
                        {"Figma l√† c√¥ng c·ª• d√πng ƒë·ªÉ l√†m g√¨?", "L·∫≠p tr√¨nh web", "Thi·∫øt k·∫ø giao di·ªán", "Qu·∫£n l√Ω d·ª± √°n", "Vi·∫øt vƒÉn b·∫£n", "B"}
                };
            } else {
                // C√¢u h·ªèi chung
                questionData = new String[][]{
                        {"M·ª•c ti√™u ch√≠nh c·ªßa kh√≥a h·ªçc n√†y l√† g√¨?", "Gi·∫£i tr√≠", "H·ªçc ki·∫øn th·ª©c v√† k·ªπ nƒÉng m·ªõi", "Giao l∆∞u", "Thi ƒëua", "B"},
                        {"Th√°i ƒë·ªô h·ªçc t·∫≠p t·ªët nh·∫•t l√† g√¨?", "Th·ª• ƒë·ªông", "T√≠ch c·ª±c v√† ch·ªß ƒë·ªông", "Th·ªù ∆°", "M√°y m√≥c", "B"},
                        {"ƒêi·ªÅu quan tr·ªçng nh·∫•t khi h·ªçc online l√† g√¨?", "T·ª± gi√°c v√† k·ª∑ lu·∫≠t", "C√≥ m√°y t√≠nh ƒë·∫Øt", "H·ªçc nhi·ªÅu gi·ªù", "Ghi ch√©p nhi·ªÅu", "A"}
                };
            }

            for (String[] data : questionData) {
                Question question = new Question();
                question.setQuestionText(data[0]);
                question.setOptionA(data[1]);
                question.setOptionB(data[2]);
                question.setOptionC(data[3]);
                question.setOptionD(data[4]);
                question.setCorrectOption(data[5]);
                question.setExplanation("ƒê√¢y l√† ƒë√°p √°n ƒë√∫ng d·ª±a tr√™n n·ªôi dung ƒë√£ h·ªçc trong kh√≥a h·ªçc.");
                question.setQuiz(quiz);

                quizService.addQuestionToQuiz(quiz, question);
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o c√¢u h·ªèi m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o ƒëƒÉng k√Ω m·∫´u
     */
    private void createSampleEnrollments() {
        try {
            List<User> students = userService.findByRole(User.Role.STUDENT);
            List<Course> courses = courseService.findAllActiveCourses();

            if (students.isEmpty() || courses.isEmpty()) {
                return;
            }

            // M·ªói student ƒëƒÉng k√Ω 2-3 kh√≥a h·ªçc ng·∫´u nhi√™n
            for (User student : students) {
                int enrollmentCount = 0;
                for (int i = 0; i < courses.size() && enrollmentCount < 3; i++) {
                    Course course = courses.get(i);

                    // Ch·ªâ ƒëƒÉng k√Ω n·∫øu ch∆∞a ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y
                    if (!enrollmentService.isStudentEnrolled(student, course)) {
                        try {
                            enrollmentService.enrollStudent(student, course);
                            enrollmentCount++;
                        } catch (Exception e) {
                            // B·ªè qua l·ªói ƒëƒÉng k√Ω
                        }
                    }
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o ƒëƒÉng k√Ω m·∫´u cho h·ªçc vi√™n");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o ƒëƒÉng k√Ω m·∫´u: " + e.getMessage());
        }
    }
}