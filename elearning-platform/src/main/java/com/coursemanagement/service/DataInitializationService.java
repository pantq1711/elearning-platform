package com.coursemanagement.service;

import com.coursemanagement.entity.*;
import com.coursemanagement.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.annotation.PostConstruct;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * Service kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng e-learning
 * T·ª± ƒë·ªông ch·∫°y khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông v√† t·∫°o data demo
 * C·∫£i thi·ªán v·ªõi d·ªØ li·ªáu phong ph√∫ v√† realistic h∆°n
 */
@Service
@Transactional
public class DataInitializationService {

    @Autowired private UserRepository userRepository;
    @Autowired private CategoryRepository categoryRepository;
    @Autowired private CourseRepository courseRepository;
    @Autowired private LessonRepository lessonRepository;
    @Autowired private QuizRepository quizRepository;
    @Autowired private QuestionRepository questionRepository;
    @Autowired private EnrollmentRepository enrollmentRepository;
    @Autowired private PasswordEncoder passwordEncoder;

    private Random random = new Random();

    /**
     * Method ch√≠nh ƒë·ªÉ kh·ªüi t·∫°o t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u
     * Ch·∫°y ngay sau khi ApplicationContext ƒë∆∞·ª£c load
     */
    @PostConstruct
    public void initializeData() {
        try {
            System.out.println("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng e-learning...");

            createSampleUsers();
            createSampleCategories();
            createSampleCourses();
            createSampleLessons();
            createSampleQuizzes();
            createSampleEnrollments();

            System.out.println("‚úÖ Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u ho√†n th√†nh!");
            printSystemStatistics();

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * T·∫°o ng∆∞·ªùi d√πng m·∫´u v·ªõi c√°c role kh√°c nhau
     * Bao g·ªìm admin, gi·∫£ng vi√™n v√† h·ªçc vi√™n
     */
    private void createSampleUsers() {
        System.out.println("üë• T·∫°o ng∆∞·ªùi d√πng m·∫´u...");

        try {
            // Ki·ªÉm tra ƒë√£ c√≥ admin ch∆∞a
            if (userRepository.findByUsername("admin").isPresent()) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i, b·ªè qua...");
                return;
            }

            // T·∫°o t√†i kho·∫£n Admin
            User admin = new User();
            admin.setUsername("admin");
            admin.setPassword(passwordEncoder.encode("admin123"));
            admin.setEmail("admin@elearning.vn");
            admin.setFullName("Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng");
            admin.setRole(User.Role.ADMIN);
            admin.setActive(true);
            admin.setPhoneNumber("0901234567");
            admin.setBio("Qu·∫£n tr·ªã vi√™n ch√≠nh c·ªßa h·ªá th·ªëng e-learning platform");
            userRepository.save(admin);

            // T·∫°o c√°c gi·∫£ng vi√™n m·∫´u v·ªõi th√¥ng tin chi ti·∫øt
            String[][] instructorData = {
                    {"instructor1", "Nguy·ªÖn VƒÉn An", "nguyenvanan@elearning.vn", "0902345678",
                            "Gi·∫£ng vi√™n l·∫≠p tr√¨nh v·ªõi 10 nƒÉm kinh nghi·ªám trong Java v√† Spring Framework"},
                    {"instructor2", "Tr·∫ßn Th·ªã B√¨nh", "tranthibinh@elearning.vn", "0903456789",
                            "Chuy√™n gia thi·∫øt k·∫ø UI/UX v·ªõi nhi·ªÅu d·ª± √°n th·ª±c t·∫ø cho c√°c c√¥ng ty l·ªõn"},
                    {"instructor3", "L√™ Ho√†ng C√¥ng", "lehoangcong@elearning.vn", "0904567890",
                            "Digital Marketing Expert v·ªõi ch·ª©ng ch·ªâ Google Ads v√† Facebook Blueprint"},
                    {"instructor4", "Ph·∫°m Th·ªã Dung", "phamthidung@elearning.vn", "0905678901",
                            "Gi·∫£ng vi√™n ti·∫øng Anh v·ªõi b·∫±ng TESOL v√† kinh nghi·ªám gi·∫£ng d·∫°y IELTS"},
                    {"instructor5", "Ho√†ng VƒÉn Minh", "hoangvanminh@elearning.vn", "0906789012",
                            "Business Analyst v·ªõi MBA v√† kinh nghi·ªám qu·∫£n l√Ω d·ª± √°n t·∫°i c√°c t·∫≠p ƒëo√†n"}
            };

            for (String[] data : instructorData) {
                User instructor = new User();
                instructor.setUsername(data[0]);
                instructor.setPassword(passwordEncoder.encode("instructor123"));
                instructor.setFullName(data[1]);
                instructor.setEmail(data[2]);
                instructor.setRole(User.Role.INSTRUCTOR);
                instructor.setActive(true);
                instructor.setPhoneNumber(data[3]);
                instructor.setBio(data[4]);
                userRepository.save(instructor);
            }

            // T·∫°o h·ªçc vi√™n m·∫´u v·ªõi ƒëa d·∫°ng background
            String[][] studentData = {
                    {"student1", "Nguy·ªÖn Minh Tu·∫•n", "tuannguyen@gmail.com", "0907890123",
                            "Sinh vi√™n nƒÉm 3 ng√†nh C√¥ng ngh·ªá th√¥ng tin, ƒëam m√™ l·∫≠p tr√¨nh web"},
                    {"student2", "Tr·∫ßn Th·ªã Hoa", "hoatran@gmail.com", "0908901234",
                            "Nh√¢n vi√™n marketing mu·ªën n√¢ng cao k·ªπ nƒÉng digital marketing"},
                    {"student3", "L√™ VƒÉn B√°ch", "bachle@gmail.com", "0909012345",
                            "Thi·∫øt k·∫ø ƒë·ªì h·ªça freelancer mu·ªën h·ªçc UI/UX design"},
                    {"student4", "Ph·∫°m Th·ªã Lan", "lanpham@gmail.com", "0900123456",
                            "Gi√°o vi√™n ti·∫øng Anh mu·ªën c·∫£i thi·ªán k·ªπ nƒÉng giao ti·∫øp"},
                    {"student5", "Nguy·ªÖn Ho√†ng Duy", "duynguyen@gmail.com", "0901234567",
                            "Ch·ªß c·ª≠a h√†ng nh·ªè mu·ªën h·ªçc kinh doanh v√† qu·∫£n l√Ω"},
                    {"student6", "Tr·∫ßn Minh Ch√¢u", "chautran@gmail.com", "0902345678",
                            "Fresh graduate mu·ªën h·ªçc l·∫≠p tr√¨nh ƒë·ªÉ xin vi·ªác"},
                    {"student7", "L√™ Th·ªã Mai", "maile@gmail.com", "0903456789",
                            "Nh√¢n vi√™n k·∫ø to√°n mu·ªën chuy·ªÉn sang ph√¢n t√≠ch d·ªØ li·ªáu"},
                    {"student8", "Ph·∫°m VƒÉn Nam", "nampham@gmail.com", "0904567890",
                            "Developer junior mu·ªën n√¢ng cao k·ªπ nƒÉng Java v√† Spring"}
            };

            for (String[] data : studentData) {
                User student = new User();
                student.setUsername(data[0]);
                student.setPassword(passwordEncoder.encode("student123"));
                student.setFullName(data[1]);
                student.setEmail(data[2]);
                student.setRole(User.Role.STUDENT);
                student.setActive(true);
                student.setPhoneNumber(data[3]);
                student.setBio(data[4]);
                userRepository.save(student);
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o " + (1 + instructorData.length + studentData.length) + " ng∆∞·ªùi d√πng m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o ng∆∞·ªùi d√πng m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o danh m·ª•c kh√≥a h·ªçc v·ªõi m√†u s·∫Øc v√† icon ph√π h·ª£p
     */
    private void createSampleCategories() {
        System.out.println("üìÅ T·∫°o danh m·ª•c kh√≥a h·ªçc...");

        try {
            if (categoryRepository.count() > 0) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu danh m·ª•c ƒë√£ t·ªìn t·∫°i, b·ªè qua...");
                return;
            }

            String[][] categoryData = {
                    {"L·∫≠p tr√¨nh", "C√°c kh√≥a h·ªçc v·ªÅ l·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao", "#007bff", "fas fa-code"},
                    {"Thi·∫øt k·∫ø", "Kh√≥a h·ªçc thi·∫øt k·∫ø ƒë·ªì h·ªça, UI/UX v√† s√°ng t·∫°o ngh·ªá thu·∫≠t s·ªë", "#28a745", "fas fa-palette"},
                    {"Marketing", "Digital marketing, SEO, SEM, Social Media v√† chi·∫øn l∆∞·ª£c b√°n h√†ng", "#ffc107", "fas fa-bullhorn"},
                    {"Ngo·∫°i ng·ªØ", "H·ªçc ti·∫øng Anh, ti·∫øng Nh·∫≠t, ti·∫øng H√†n v√† c√°c ng√¥n ng·ªØ qu·ªëc t·∫ø kh√°c", "#17a2b8", "fas fa-language"},
                    {"Kinh doanh", "Qu·∫£n l√Ω, kh·ªüi nghi·ªáp, ph√°t tri·ªÉn doanh nghi·ªáp v√† k·ªπ nƒÉng l√£nh ƒë·∫°o", "#6c757d", "fas fa-briefcase"},
                    {"K·ªπ nƒÉng m·ªÅm", "K·ªπ nƒÉng giao ti·∫øp, thuy·∫øt tr√¨nh, ph√°t tri·ªÉn b·∫£n th√¢n v√† t∆∞ duy s√°ng t·∫°o", "#e83e8c", "fas fa-user-graduate"},
                    {"C√¥ng ngh·ªá", "AI, Machine Learning, Data Science v√† c√°c c√¥ng ngh·ªá m·ªõi nh·∫•t", "#6f42c1", "fas fa-robot"},
                    {"Ngh·ªá thu·∫≠t", "√Çm nh·∫°c, h·ªôi h·ªça, nhi·∫øp ·∫£nh v√† c√°c ngh·ªá thu·∫≠t s√°ng t·∫°o", "#fd7e14", "fas fa-camera"}
            };

            for (String[] data : categoryData) {
                Category category = new Category();
                category.setName(data[0]);
                category.setDescription(data[1]);
                category.setColorCode(data[2]);
                category.setIconClass(data[3]);
                category.setFeatured(true);
                categoryRepository.save(category);
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o " + categoryData.length + " danh m·ª•c m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o danh m·ª•c m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o kh√≥a h·ªçc m·∫´u v·ªõi th√¥ng tin chi ti·∫øt v√† realistic
     */
    private void createSampleCourses() {
        System.out.println("üìö T·∫°o kh√≥a h·ªçc m·∫´u...");

        try {
            if (courseRepository.count() > 0) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu kh√≥a h·ªçc ƒë√£ t·ªìn t·∫°i, b·ªè qua...");
                return;
            }

            List<Category> categories = categoryRepository.findAll();
            List<User> instructors = userRepository.findByRole(User.Role.INSTRUCTOR);

            if (categories.isEmpty() || instructors.isEmpty()) {
                System.out.println("‚ö†Ô∏è Ch∆∞a c√≥ danh m·ª•c ho·∫∑c gi·∫£ng vi√™n, b·ªè qua t·∫°o kh√≥a h·ªçc");
                return;
            }

            // D·ªØ li·ªáu kh√≥a h·ªçc phong ph√∫ v√† realistic
            Object[][] courseData = {
                    {"L·∫≠p tr√¨nh Java t·ª´ Zero ƒë·∫øn Hero",
                            "Kh√≥a h·ªçc Java to√†n di·ªán t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, bao g·ªìm OOP, Collections, Streams, Spring Framework v√† x√¢y d·ª±ng ·ª©ng d·ª•ng th·ª±c t·∫ø.",
                            "L·∫≠p tr√¨nh", 80, Course.DifficultyLevel.INTERMEDIATE, 1499000.0, true,
                            "Bi·∫øt s·ª≠ d·ª•ng m√°y t√≠nh c∆° b·∫£n",
                            "Th√†nh th·∫°o Java Core, OOP, Spring Boot, MySQL, c√≥ th·ªÉ x√¢y d·ª±ng web application ho√†n ch·ªânh"},

                    {"UI/UX Design v·ªõi Figma Pro",
                            "T√¨m hi·ªÉu c√°c nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX v√† th·ª±c h√†nh v·ªõi c√¥ng c·ª• Figma chuy√™n nghi·ªáp, t·ª´ wireframe ƒë·∫øn prototype ho√†n ch·ªânh.",
                            "Thi·∫øt k·∫ø", 45, Course.DifficultyLevel.BEGINNER, 899000.0, true,
                            "Kh√¥ng c·∫ßn kinh nghi·ªám tr∆∞·ªõc ƒë√≥",
                            "Thi·∫øt k·∫ø ƒë∆∞·ª£c giao di·ªán app/web, th√†nh th·∫°o Figma, hi·ªÉu v·ªÅ User Experience"},

                    {"Digital Marketing Mastery 2024",
                            "Kh√≥a h·ªçc marketing s·ªë to√†n di·ªán, bao g·ªìm SEO, Google Ads, Facebook Ads, Content Marketing v√† Analytics v·ªõi case study th·ª±c t·∫ø.",
                            "Marketing", 60, Course.DifficultyLevel.INTERMEDIATE, 1299000.0, true,
                            "Bi·∫øt s·ª≠ d·ª•ng internet v√† m·∫°ng x√£ h·ªôi",
                            "L·∫≠p v√† th·ª±c hi·ªán chi·∫øn l∆∞·ª£c marketing s·ªë, ch·∫°y qu·∫£ng c√°o hi·ªáu qu·∫£, ph√¢n t√≠ch ROI"},

                    {"Ti·∫øng Anh giao ti·∫øp Business",
                            "Kh√≥a h·ªçc ti·∫øng Anh giao ti·∫øp trong m√¥i tr∆∞·ªùng doanh nghi·ªáp, presentation, negotiation v√† email writing chuy√™n nghi·ªáp.",
                            "Ngo·∫°i ng·ªØ", 100, Course.DifficultyLevel.INTERMEDIATE, 1199000.0, false,
                            "Ti·∫øng Anh c∆° b·∫£n (A2 tr·ªü l√™n)",
                            "Giao ti·∫øp t·ª± tin trong meeting, thuy·∫øt tr√¨nh, vi·∫øt email chuy√™n nghi·ªáp"},

                    {"Startup & Qu·∫£n l√Ω d·ª± √°n Agile",
                            "H·ªçc c√°c ph∆∞∆°ng ph√°p kh·ªüi nghi·ªáp hi·ªán ƒë·∫°i, qu·∫£n l√Ω d·ª± √°n v·ªõi Agile/Scrum, x√¢y d·ª±ng team v√† scale-up doanh nghi·ªáp.",
                            "Kinh doanh", 50, Course.DifficultyLevel.ADVANCED, 1899000.0, true,
                            "C√≥ √Ω t∆∞·ªüng kinh doanh ho·∫∑c ƒëang l√†m vi·ªác trong team",
                            "X√¢y d·ª±ng business plan, qu·∫£n l√Ω team hi·ªáu qu·∫£, ·ª©ng d·ª•ng Agile/Scrum"},

                    {"Thuy·∫øt tr√¨nh v√† Public Speaking",
                            "Ph√°t tri·ªÉn k·ªπ nƒÉng thuy·∫øt tr√¨nh v√† giao ti·∫øp tr∆∞·ªõc ƒë√°m ƒë√¥ng m·ªôt c√°ch t·ª± tin, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.",
                            "K·ªπ nƒÉng m·ªÅm", 30, Course.DifficultyLevel.BEGINNER, 699000.0, false,
                            "Kh√¥ng c·∫ßn kinh nghi·ªám",
                            "Thuy·∫øt tr√¨nh t·ª± tin, structure n·ªôi dung hi·ªáu qu·∫£, x·ª≠ l√Ω Q&A"},

                    {"Python cho Data Science",
                            "H·ªçc Python ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi Pandas, NumPy, Matplotlib v√† Machine Learning v·ªõi Scikit-learn, bao g·ªìm d·ª± √°n th·ª±c t·∫ø.",
                            "C√¥ng ngh·ªá", 90, Course.DifficultyLevel.INTERMEDIATE, 1699000.0, true,
                            "Bi·∫øt to√°n c∆° b·∫£n v√† logic t∆∞ duy",
                            "Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi Python, x√¢y d·ª±ng m√¥ h√¨nh ML c∆° b·∫£n, visualization"},

                    {"Adobe Photoshop t·ª´ A-Z",
                            "Kh√≥a h·ªçc Photoshop to√†n di·ªán cho thi·∫øt k·∫ø ƒë·ªì h·ªça v√† ch·ªânh s·ª≠a ·∫£nh chuy√™n nghi·ªáp, t·ª´ tools c∆° b·∫£n ƒë·∫øn k·ªπ thu·∫≠t n√¢ng cao.",
                            "Ngh·ªá thu·∫≠t", 55, Course.DifficultyLevel.BEGINNER, 999000.0, false,
                            "C√≥ m√°y t√≠nh v√† Photoshop",
                            "Ch·ªânh s·ª≠a ·∫£nh chuy√™n nghi·ªáp, thi·∫øt k·∫ø poster, banner, hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát"},

                    {"Machine Learning c∆° b·∫£n",
                            "Gi·ªõi thi·ªáu Machine Learning v·ªõi Python, c√°c thu·∫≠t to√°n c∆° b·∫£n, v√† ·ª©ng d·ª•ng th·ª±c t·∫ø trong business.",
                            "C√¥ng ngh·ªá", 70, Course.DifficultyLevel.ADVANCED, 2199000.0, true,
                            "Bi·∫øt Python c∆° b·∫£n, to√°n h·ªçc ƒë·∫°i c∆∞∆°ng",
                            "Hi·ªÉu v√† ·ª©ng d·ª•ng ML algorithms, x√¢y d·ª±ng model predictions"},

                    {"Facebook Ads Advanced",
                            "Chi·∫øn l∆∞·ª£c qu·∫£ng c√°o Facebook n√¢ng cao, t·ªëi ∆∞u h√≥a ROI, custom audience v√† retargeting v·ªõi budget optimization.",
                            "Marketing", 35, Course.DifficultyLevel.ADVANCED, 1599000.0, true,
                            "ƒê√£ ch·∫°y Facebook Ads c∆° b·∫£n",
                            "T·ªëi ∆∞u campaigns hi·ªáu qu·∫£, scale budget, gi·∫£m cost per acquisition"}
            };

            for (Object[] data : courseData) {
                Course course = new Course();
                course.setName((String) data[0]);
                course.setDescription((String) data[1]);
                course.setDuration((Integer) data[3]);
                course.setDifficultyLevel((Course.DifficultyLevel) data[4]);
                course.setPrice((Double) data[5]);
                course.setFeatured((Boolean) data[6]);
                course.setPrerequisites((String) data[7]);
                course.setLearningObjectives((String) data[8]);
                course.setActive(true);
                course.setLanguage("Vietnamese");

                // T√¨m category ph√π h·ª£p
                String categoryName = (String) data[2];
                Category category = categories.stream()
                        .filter(c -> c.getName().contains(categoryName))
                        .findFirst()
                        .orElse(categories.get(0));
                course.setCategory(category);

                // Random instructor
                User instructor = instructors.get(random.nextInt(instructors.size()));
                course.setInstructor(instructor);

                courseRepository.save(course);
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o " + courseData.length + " kh√≥a h·ªçc m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o kh√≥a h·ªçc m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o b√†i gi·∫£ng cho t·ª´ng kh√≥a h·ªçc
     */
    private void createSampleLessons() {
        System.out.println("üìù T·∫°o b√†i gi·∫£ng m·∫´u...");

        try {
            List<Course> courses = courseRepository.findAll();
            if (courses.isEmpty()) {
                System.out.println("‚ö†Ô∏è Ch∆∞a c√≥ kh√≥a h·ªçc, b·ªè qua t·∫°o b√†i gi·∫£ng");
                return;
            }

            for (Course course : courses) {
                String courseName = course.getName();
                String[][] lessonData;

                if (courseName.contains("Java")) {
                    lessonData = new String[][]{
                            {"Gi·ªõi thi·ªáu v·ªÅ Java v√† c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng",
                                    "T√¨m hi·ªÉu l·ªãch s·ª≠ Java, ƒë·∫∑c ƒëi·ªÉm c·ªßa ng√¥n ng·ªØ v√† h∆∞·ªõng d·∫´n c√†i ƒë·∫∑t JDK, IDE ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫≠p tr√¨nh.",
                                    "https://www.youtube.com/watch?v=eIrMbAQSU34"},
                            {"C√∫ ph√°p c∆° b·∫£n v√† bi·∫øn trong Java",
                                    "H·ªçc c√∫ ph√°p c∆° b·∫£n, c√°ch khai b√°o bi·∫øn, c√°c ki·ªÉu d·ªØ li·ªáu primitive v√† reference trong Java.",
                                    null},
                            {"C·∫•u tr√∫c ƒëi·ªÅu khi·ªÉn v√† v√≤ng l·∫∑p",
                                    "If-else, switch-case, for, while, do-while v√† c√°c c·∫•u tr√∫c ƒëi·ªÅu khi·ªÉn kh√°c trong Java.",
                                    "https://www.youtube.com/watch?v=YEhDbWaKAXM"},
                            {"L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng - Classes v√† Objects",
                                    "Kh√°i ni·ªám OOP, c√°ch t·∫°o class, object, constructor v√† methods trong Java.",
                                    null},
                            {"Inheritance v√† Polymorphism",
                                    "K·∫ø th·ª´a, ƒëa h√¨nh v√† c√°c nguy√™n t·∫Øc OOP n√¢ng cao trong Java.",
                                    "https://www.youtube.com/watch?v=Cr_U6DyWtWM"},
                            {"Exception Handling v√† File I/O",
                                    "X·ª≠ l√Ω ngo·∫°i l·ªá v·ªõi try-catch-finally, ƒë·ªçc ghi file v√† stream trong Java.",
                                    null},
                            {"Collections Framework",
                                    "ArrayList, LinkedList, HashMap, TreeSet v√† c√°c collection quan tr·ªçng trong Java.",
                                    null},
                            {"Lambda Expressions v√† Stream API",
                                    "Functional programming v·ªõi lambda, stream operations ƒë·ªÉ x·ª≠ l√Ω data hi·ªáu qu·∫£.",
                                    null}
                    };
                } else if (courseName.contains("UI/UX") || courseName.contains("Figma")) {
                    lessonData = new String[][]{
                            {"Nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX c∆° b·∫£n",
                                    "T√¨m hi·ªÉu v·ªÅ User Interface, User Experience v√† c√°c nguy√™n t·∫Øc thi·∫øt k·∫ø c∆° b·∫£n.",
                                    null},
                            {"Gi·ªõi thi·ªáu Figma v√† interface",
                                    "L√†m quen v·ªõi giao di·ªán Figma, c√°c tools c∆° b·∫£n v√† setup workspace.",
                                    "https://www.youtube.com/watch?v=FTlczfBm7bk"},
                            {"Thi·∫øt k·∫ø Wireframe v√† Prototype",
                                    "T·∫°o wireframe cho app/web, low-fidelity v√† high-fidelity prototype.",
                                    null},
                            {"Color Theory v√† Typography",
                                    "L√Ω thuy·∫øt m√†u s·∫Øc, c√°ch ph·ªëi m√†u v√† ch·ªçn font ch·ªØ ph√π h·ª£p cho design.",
                                    null},
                            {"Component Design System",
                                    "X√¢y d·ª±ng design system v·ªõi component, style guide v√† maintain consistency.",
                                    null},
                            {"User Research v√† Testing",
                                    "Ph∆∞∆°ng ph√°p nghi√™n c·ª©u ng∆∞·ªùi d√πng, A/B testing v√† thu th·∫≠p feedback.",
                                    null}
                    };
                } else if (courseName.contains("Python")) {
                    lessonData = new String[][]{
                            {"Python Fundamentals",
                                    "C√∫ ph√°p Python c∆° b·∫£n, variables, data types v√† control structures.",
                                    "https://www.youtube.com/watch?v=_uQrJ0TkZlc"},
                            {"Pandas cho Data Manipulation",
                                    "L√†m vi·ªác v·ªõi DataFrame, Series, ƒë·ªçc CSV/Excel v√† data cleaning v·ªõi Pandas.",
                                    null},
                            {"NumPy cho Scientific Computing",
                                    "Arrays, mathematical operations v√† linear algebra v·ªõi NumPy.",
                                    null},
                            {"Data Visualization v·ªõi Matplotlib",
                                    "T·∫°o charts, plots v√† visualization ƒë·∫πp v·ªõi Matplotlib v√† Seaborn.",
                                    null},
                            {"Machine Learning v·ªõi Scikit-learn",
                                    "Regression, classification v√† clustering v·ªõi scikit-learn library.",
                                    null},
                            {"Project: Ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø",
                                    "D·ª± √°n th·ª±c h√†nh ph√¢n t√≠ch dataset th·ª±c t·∫ø t·ª´ A-Z.",
                                    null}
                    };
                } else {
                    // B√†i gi·∫£ng chung cho c√°c kh√≥a h·ªçc kh√°c
                    lessonData = new String[][]{
                            {"B√†i 1: Gi·ªõi thi·ªáu kh√≥a h·ªçc",
                                    "T·ªïng quan v·ªÅ n·ªôi dung, m·ª•c ti√™u v√† l·ªô tr√¨nh h·ªçc t·∫≠p c·ªßa kh√≥a h·ªçc.",
                                    null},
                            {"B√†i 2: Ki·∫øn th·ª©c n·ªÅn t·∫£ng",
                                    "Nh·ªØng ki·∫øn th·ª©c c∆° b·∫£n v√† prerequisite c·∫ßn thi·∫øt cho kh√≥a h·ªçc.",
                                    null},
                            {"B√†i 3: Th·ª±c h√†nh c∆° b·∫£n",
                                    "B√†i t·∫≠p v√† th·ª±c h√†nh ƒë·∫ßu ti√™n ƒë·ªÉ l√†m quen v·ªõi n·ªôi dung kh√≥a h·ªçc.",
                                    null},
                            {"B√†i 4: K·ªπ thu·∫≠t n√¢ng cao",
                                    "Ph√°t tri·ªÉn k·ªπ nƒÉng ·ªü m·ª©c ƒë·ªô n√¢ng cao v·ªõi case study th·ª±c t·∫ø.",
                                    null},
                            {"B√†i 5: D·ª± √°n t·ªïng h·ª£p",
                                    "Th·ª±c hi·ªán d·ª± √°n cu·ªëi kh√≥a ƒë·ªÉ √°p d·ª•ng to√†n b·ªô ki·∫øn th·ª©c ƒë√£ h·ªçc.",
                                    null}
                    };
                }

                for (int i = 0; i < lessonData.length; i++) {
                    Lesson lesson = new Lesson();
                    lesson.setTitle(lessonData[i][0]);
                    lesson.setContent(lessonData[i][1]);
                    lesson.setVideoLink(lessonData[i][2]);
                    lesson.setCourse(course);
                    lesson.setOrderIndex(i + 1);
                    lesson.setActive(true);
                    lesson.setEstimatedDuration(30 + (i * 5) + random.nextInt(15)); // 30-70 ph√∫t
                    lesson.setPreview(i == 0); // B√†i ƒë·∫ßu cho preview mi·ªÖn ph√≠

                    lessonRepository.save(lesson);
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o b√†i gi·∫£ng cho t·∫•t c·∫£ kh√≥a h·ªçc");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o b√†i gi·∫£ng m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o quiz v√† c√¢u h·ªèi cho t·ª´ng kh√≥a h·ªçc
     */
    private void createSampleQuizzes() {
        System.out.println("‚ùì T·∫°o quiz v√† c√¢u h·ªèi m·∫´u...");

        try {
            List<Course> courses = courseRepository.findAll();
            if (courses.isEmpty()) return;

            for (Course course : courses) {
                // T·∫°o 2 quiz cho m·ªói kh√≥a h·ªçc
                for (int quizIndex = 1; quizIndex <= 2; quizIndex++) {
                    Quiz quiz = new Quiz();
                    quiz.setTitle("Ki·ªÉm tra " + (quizIndex == 1 ? "gi·ªØa kh√≥a" : "cu·ªëi kh√≥a") + " - " + course.getName());
                    quiz.setDescription("B√†i ki·ªÉm tra " + (quizIndex == 1 ? "ƒë√°nh gi√° ki·∫øn th·ª©c c∆° b·∫£n" : "t·ªïng h·ª£p to√†n kh√≥a"));
                    quiz.setDuration(quizIndex == 1 ? 30 : 60); // 30 ho·∫∑c 60 ph√∫t
                    quiz.setMaxScore(100.0);
                    quiz.setPassScore(70.0);
                    quiz.setActive(true);
                    quiz.setShowCorrectAnswers(true);
                    quiz.setShuffleQuestions(true);
                    quiz.setRequireLogin(true);
                    quiz.setCourse(course);

                    Quiz savedQuiz = quizRepository.save(quiz);

                    // T·∫°o c√¢u h·ªèi cho quiz
                    createQuestionsForQuiz(savedQuiz, course.getName());
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o quiz v√† c√¢u h·ªèi cho t·∫•t c·∫£ kh√≥a h·ªçc");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o quiz m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o c√¢u h·ªèi specific cho t·ª´ng quiz d·ª±a tr√™n t√™n kh√≥a h·ªçc
     */
    private void createQuestionsForQuiz(Quiz quiz, String courseName) {
        String[][] questionData;

        if (courseName.contains("Java")) {
            questionData = new String[][]{
                    {"Java l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh thu·ªôc lo·∫°i n√†o?",
                            "Compiled", "Interpreted", "Compiled v√† Interpreted", "Assembly", "C"},
                    {"T·ª´ kh√≥a n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k·∫ø th·ª´a trong Java?",
                            "implements", "extends", "inherits", "super", "B"},
                    {"Ph∆∞∆°ng th·ª©c main trong Java c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
                            "Private v√† static", "Public v√† dynamic", "Public v√† static", "Protected v√† final", "C"},
                    {"JVM vi·∫øt t·∫Øt c·ªßa c·ª•m t·ª´ n√†o?",
                            "Java Virtual Machine", "Java Variable Method", "Java Version Manager", "Java Visual Mode", "A"},
                    {"Ki·ªÉu d·ªØ li·ªáu n√†o l√† primitive type trong Java?",
                            "String", "ArrayList", "int", "Scanner", "C"}
            };
        } else if (courseName.contains("UI/UX") || courseName.contains("Figma")) {
            questionData = new String[][]{
                    {"UX vi·∫øt t·∫Øt c·ªßa c·ª•m t·ª´ n√†o?",
                            "User Experience", "User Extension", "Unique Experience", "Universal Extension", "A"},
                    {"Wireframe trong thi·∫øt k·∫ø UI/UX l√† g√¨?",
                            "M√†u s·∫Øc giao di·ªán", "B·∫£n ph√°c th·∫£o khung giao di·ªán", "Font ch·ªØ s·ª≠ d·ª•ng", "Hi·ªáu ·ª©ng animation", "B"},
                    {"Figma l√† c√¥ng c·ª• d√πng ƒë·ªÉ l√†m g√¨?",
                            "L·∫≠p tr√¨nh web", "Thi·∫øt k·∫ø giao di·ªán", "Qu·∫£n l√Ω d·ª± √°n", "Vi·∫øt documentation", "B"},
                    {"Nguy√™n t·∫Øc n√†o quan tr·ªçng nh·∫•t trong UI Design?",
                            "M√†u s·∫Øc ƒë·∫πp", "Nhi·ªÅu hi·ªáu ·ª©ng", "Usability", "Font ch·ªØ ƒë·∫∑c bi·ªát", "C"}
            };
        } else if (courseName.contains("Python")) {
            questionData = new String[][]{
                    {"Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh g√¨?",
                            "Compiled", "Interpreted", "Assembly", "Machine code", "B"},
                    {"Th∆∞ vi·ªán n√†o d√πng cho Data Analysis?",
                            "Pandas", "Tkinter", "Flask", "Django", "A"},
                    {"NumPy ch·ªß y·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?",
                            "Web development", "Scientific computing", "Game development", "Mobile app", "B"},
                    {"Ph∆∞∆°ng th·ª©c ƒë·ªçc CSV trong Pandas?",
                            "read_csv()", "load_csv()", "import_csv()", "open_csv()", "A"}
            };
        } else {
            // C√¢u h·ªèi chung
            questionData = new String[][]{
                    {"M·ª•c ti√™u ch√≠nh c·ªßa vi·ªác h·ªçc online l√† g√¨?",
                            "Gi·∫£i tr√≠", "Ph√°t tri·ªÉn k·ªπ nƒÉng", "Giao l∆∞u", "Thi ƒëua", "B"},
                    {"Th√°i ƒë·ªô h·ªçc t·∫≠p hi·ªáu qu·∫£ nh·∫•t l√† g√¨?",
                            "Th·ª• ƒë·ªông", "T√≠ch c·ª±c v√† ch·ªß ƒë·ªông", "Th·ªù ∆°", "M√°y m√≥c", "B"},
                    {"Y·∫øu t·ªë quan tr·ªçng nh·∫•t khi h·ªçc online?",
                            "T·ª± gi√°c v√† k·ª∑ lu·∫≠t", "M√°y t√≠nh ƒë·∫Øt ti·ªÅn", "H·ªçc nhi·ªÅu gi·ªù", "Ghi ch√©p nhi·ªÅu", "A"}
            };
        }

        for (int i = 0; i < questionData.length; i++) {
            Question question = new Question();
            question.setQuestionText(questionData[i][0]);
            question.setOptionA(questionData[i][1]);
            question.setOptionB(questionData[i][2]);
            question.setOptionC(questionData[i][3]);
            question.setOptionD(questionData[i][4]);
            question.setCorrectOption(questionData[i][5]);
            question.setExplanation("Gi·∫£i th√≠ch chi ti·∫øt cho c√¢u h·ªèi n√†y s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t...");
            question.setPoints(10.0);
            question.setDisplayOrder(i + 1);
            question.setQuiz(quiz);

            questionRepository.save(question);
        }
    }

    /**
     * T·∫°o enrollment m·∫´u (h·ªçc vi√™n ƒëƒÉng k√Ω kh√≥a h·ªçc)
     */
    private void createSampleEnrollments() {
        System.out.println("üìù T·∫°o ƒëƒÉng k√Ω kh√≥a h·ªçc m·∫´u...");

        try {
            List<User> students = userRepository.findByRole(User.Role.STUDENT);
            List<Course> courses = courseRepository.findAll();

            if (students.isEmpty() || courses.isEmpty()) return;

            // M·ªói h·ªçc vi√™n ƒëƒÉng k√Ω random 2-4 kh√≥a h·ªçc
            for (User student : students) {
                int numEnrollments = 2 + random.nextInt(3); // 2-4 kh√≥a h·ªçc
                List<Course> selectedCourses = new ArrayList<>();

                for (int i = 0; i < numEnrollments && i < courses.size(); i++) {
                    Course course;
                    do {
                        course = courses.get(random.nextInt(courses.size()));
                    } while (selectedCourses.contains(course));

                    selectedCourses.add(course);

                    Enrollment enrollment = new Enrollment();
                    enrollment.setStudent(student);
                    enrollment.setCourse(course);
                    enrollment.setEnrollmentDate(LocalDateTime.now().minusDays(random.nextInt(30)));

                    // Random progress
                    int progress = random.nextInt(101);
                    enrollment.setProgress(progress);
                    enrollment.setCompleted(progress >= 100);

                    if (enrollment.isCompleted()) {
                        enrollment.setCompletionDate(LocalDateTime.now().minusDays(random.nextInt(10)));
                        enrollment.setCertificateIssued(true);
                    }

                    enrollmentRepository.save(enrollment);
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o enrollment m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o enrollment m·∫´u: " + e.getMessage());
        }
    }

    /**
     * In th·ªëng k√™ h·ªá th·ªëng sau khi kh·ªüi t·∫°o
     */
    private void printSystemStatistics() {
        System.out.println("\nüìä TH·ªêNG K√ä H·ªÜ TH·ªêNG AFTER INITIALIZATION:");
        System.out.println("üë• T·ªïng s·ªë ng∆∞·ªùi d√πng: " + userRepository.count());
        System.out.println("üë®‚Äçüè´ Gi·∫£ng vi√™n: " + userRepository.countByRole(User.Role.INSTRUCTOR));
        System.out.println("üë®‚Äçüéì H·ªçc vi√™n: " + userRepository.countByRole(User.Role.STUDENT));
        System.out.println("üìÅ Danh m·ª•c: " + categoryRepository.count());
        System.out.println("üìö Kh√≥a h·ªçc: " + courseRepository.count());
        System.out.println("üìù B√†i gi·∫£ng: " + lessonRepository.count());
        System.out.println("‚ùì Quiz: " + quizRepository.count());
        System.out.println("‚ùî C√¢u h·ªèi: " + questionRepository.count());
        System.out.println("üìã ƒêƒÉng k√Ω: " + enrollmentRepository.count());
        System.out.println("=====================================\n");
    }
}