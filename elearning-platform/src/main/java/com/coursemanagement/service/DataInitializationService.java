package com.coursemanagement.service;

import com.coursemanagement.entity.*;
import com.coursemanagement.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * Service ƒë·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng
 * Ch·∫°y t·ª± ƒë·ªông khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
 */
@Service
@Transactional
public class DataInitializationService implements CommandLineRunner {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private CourseRepository courseRepository;

    @Autowired
    private LessonRepository lessonRepository;

    @Autowired
    private QuizRepository quizRepository;

    @Autowired
    private QuestionRepository questionRepository;

    @Autowired
    private EnrollmentRepository enrollmentRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * Entry point - ch·∫°y khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
     */
    @Override
    public void run(String... args) throws Exception {
        System.out.println("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u...");

        try {
            // T·∫°o d·ªØ li·ªáu theo th·ª© t·ª± dependencies
            createSampleUsers();
            createSampleCategories();
            createSampleCourses();
            createSampleLessons();
            createSampleQuizzes();
            createSampleEnrollments();

            System.out.println("‚úÖ Ho√†n th√†nh kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u!");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * T·∫°o ng∆∞·ªùi d√πng m·∫´u
     */
    private void createSampleUsers() {
        System.out.println("üìù T·∫°o ng∆∞·ªùi d√πng m·∫´u...");

        try {
            // Ki·ªÉm tra ƒë√£ c√≥ admin ch∆∞a
            if (userRepository.findByUsername("admin").isPresent()) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i, b·ªè qua...");
                return;
            }

            // T·∫°o Admin
            User admin = new User();
            admin.setUsername("admin");
            admin.setPassword(passwordEncoder.encode("admin123"));
            admin.setEmail("admin@coursemanagement.com");
            admin.setFullName("Qu·∫£n tr·ªã vi√™n");
            admin.setRole(User.Role.ADMIN);
            admin.setActive(true);
            userRepository.save(admin);

            // T·∫°o Instructors
            String[][] instructorData = {
                    {"instructor1", "instructor123", "instructor1@coursemanagement.com", "Nguy·ªÖn VƒÉn Gi√°o"},
                    {"instructor2", "instructor123", "instructor2@coursemanagement.com", "Tr·∫ßn Th·ªã H∆∞·ªõng"},
                    {"instructor3", "instructor123", "instructor3@coursemanagement.com", "Ph·∫°m VƒÉn Tu·∫•n"},
                    {"instructor4", "instructor123", "instructor4@coursemanagement.com", "L√™ Th·ªã Mai"}
            };

            for (String[] data : instructorData) {
                User instructor = new User();
                instructor.setUsername(data[0]);
                instructor.setPassword(passwordEncoder.encode(data[1]));
                instructor.setEmail(data[2]);
                instructor.setFullName(data[3]);
                instructor.setRole(User.Role.INSTRUCTOR);
                instructor.setActive(true);
                userRepository.save(instructor);
            }

            // T·∫°o Students
            String[][] studentData = {
                    {"student1", "student123", "student1@coursemanagement.com", "Ho√†ng VƒÉn An"},
                    {"student2", "student123", "student2@coursemanagement.com", "Nguy·ªÖn Th·ªã B√≠ch"},
                    {"student3", "student123", "student3@coursemanagement.com", "Tr·∫ßn VƒÉn C∆∞·ªùng"},
                    {"student4", "student123", "student4@coursemanagement.com", "L√™ Th·ªã Dung"},
                    {"student5", "student123", "student5@coursemanagement.com", "Ph·∫°m VƒÉn Em"},
                    {"student6", "student123", "student6@coursemanagement.com", "V√µ Th·ªã Ph∆∞∆°ng"}
            };

            for (String[] data : studentData) {
                User student = new User();
                student.setUsername(data[0]);
                student.setPassword(passwordEncoder.encode(data[1]));
                student.setEmail(data[2]);
                student.setFullName(data[3]);
                student.setRole(User.Role.STUDENT);
                student.setActive(true);
                userRepository.save(student);
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o " + (1 + instructorData.length + studentData.length) + " ng∆∞·ªùi d√πng m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o ng∆∞·ªùi d√πng m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o danh m·ª•c m·∫´u
     */
    private void createSampleCategories() {
        System.out.println("üìÅ T·∫°o danh m·ª•c m·∫´u...");

        try {
            // Ki·ªÉm tra ƒë√£ c√≥ danh m·ª•c ch∆∞a
            if (categoryRepository.count() > 0) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu danh m·ª•c ƒë√£ t·ªìn t·∫°i, b·ªè qua...");
                return;
            }

            String[][] categoryData = {
                    {"L·∫≠p tr√¨nh", "C√°c kh√≥a h·ªçc v·ªÅ l·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm", "#007bff", "fas fa-code"},
                    {"Thi·∫øt k·∫ø", "Kh√≥a h·ªçc thi·∫øt k·∫ø ƒë·ªì h·ªça, UI/UX v√† s√°ng t·∫°o", "#28a745", "fas fa-palette"},
                    {"Marketing", "Digital marketing, SEO, SEM v√† truy·ªÅn th√¥ng", "#ffc107", "fas fa-bullhorn"},
                    {"Ngo·∫°i ng·ªØ", "H·ªçc ti·∫øng Anh, ti·∫øng Nh·∫≠t v√† c√°c ng√¥n ng·ªØ kh√°c", "#17a2b8", "fas fa-language"},
                    {"Kinh doanh", "Qu·∫£n l√Ω, kh·ªüi nghi·ªáp v√† ph√°t tri·ªÉn doanh nghi·ªáp", "#6c757d", "fas fa-briefcase"},
                    {"K·ªπ nƒÉng m·ªÅm", "K·ªπ nƒÉng giao ti·∫øp, thuy·∫øt tr√¨nh v√† ph√°t tri·ªÉn b·∫£n th√¢n", "#e83e8c", "fas fa-user-graduate"}
            };

            for (String[] data : categoryData) {
                Category category = new Category();
                category.setName(data[0]);
                category.setDescription(data[1]);
                category.setColorCode(data[2]);
                category.setIconClass(data[3]);
                category.setFeatured(true);
                categoryRepository.save(category);
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o " + categoryData.length + " danh m·ª•c m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o danh m·ª•c m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o kh√≥a h·ªçc m·∫´u
     */
    private void createSampleCourses() {
        System.out.println("üìö T·∫°o kh√≥a h·ªçc m·∫´u...");

        try {
            // Ki·ªÉm tra ƒë√£ c√≥ kh√≥a h·ªçc ch∆∞a
            if (courseRepository.count() > 0) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu kh√≥a h·ªçc ƒë√£ t·ªìn t·∫°i, b·ªè qua...");
                return;
            }

            // L·∫•y danh s√°ch categories v√† instructors
            List<Category> categories = categoryRepository.findAll();
            List<User> instructors = userRepository.findByRole(User.Role.INSTRUCTOR);

            if (categories.isEmpty() || instructors.isEmpty()) {
                System.out.println("‚ö†Ô∏è Ch∆∞a c√≥ danh m·ª•c ho·∫∑c gi·∫£ng vi√™n, b·ªè qua t·∫°o kh√≥a h·ªçc");
                return;
            }

            // D·ªØ li·ªáu kh√≥a h·ªçc m·∫´u
            String[][] courseData = {
                    {"L·∫≠p tr√¨nh Java t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao", "Kh√≥a h·ªçc Java to√†n di·ªán t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, bao g·ªìm OOP, Collections, Streams v√† Spring Framework.", "L·∫≠p tr√¨nh", "60"},
                    {"Thi·∫øt k·∫ø UI/UX v·ªõi Figma", "T√¨m hi·ªÉu c√°c nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX v√† th·ª±c h√†nh v·ªõi c√¥ng c·ª• Figma chuy√™n nghi·ªáp.", "Thi·∫øt k·∫ø", "40"},
                    {"Digital Marketing to√†n di·ªán", "Kh√≥a h·ªçc marketing s·ªë t·ª´ A-Z, bao g·ªìm SEO, SEM, Social Media Marketing v√† Analytics.", "Marketing", "50"},
                    {"Ti·∫øng Anh giao ti·∫øp c∆° b·∫£n", "Kh√≥a h·ªçc ti·∫øng Anh giao ti·∫øp h√†ng ng√†y, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.", "Ngo·∫°i ng·ªØ", "80"},
                    {"Qu·∫£n l√Ω d·ª± √°n v·ªõi Agile", "H·ªçc c√°c ph∆∞∆°ng ph√°p qu·∫£n l√Ω d·ª± √°n hi·ªán ƒë·∫°i, t·∫≠p trung v√†o Agile v√† Scrum.", "Kinh doanh", "35"},
                    {"K·ªπ nƒÉng thuy·∫øt tr√¨nh hi·ªáu qu·∫£", "Ph√°t tri·ªÉn k·ªπ nƒÉng thuy·∫øt tr√¨nh v√† giao ti·∫øp tr∆∞·ªõc ƒë√°m ƒë√¥ng m·ªôt c√°ch t·ª± tin.", "K·ªπ nƒÉng m·ªÅm", "25"},
                    {"Python cho Data Science", "H·ªçc Python ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi Pandas, NumPy v√† Matplotlib.", "L·∫≠p tr√¨nh", "70"},
                    {"Photoshop t·ª´ c∆° b·∫£n ƒë·∫øn chuy√™n nghi·ªáp", "Kh√≥a h·ªçc Photoshop to√†n di·ªán cho thi·∫øt k·∫ø ƒë·ªì h·ªça v√† ch·ªânh s·ª≠a ·∫£nh.", "Thi·∫øt k·∫ø", "45"},
                    {"Facebook Ads mastery", "Chi·∫øn l∆∞·ª£c qu·∫£ng c√°o Facebook hi·ªáu qu·∫£, t·ª´ thi·∫øt l·∫≠p ƒë·∫øn t·ªëi ∆∞u h√≥a ROI.", "Marketing", "30"},
                    {"IELTS Speaking Band 7+", "Luy·ªán thi IELTS Speaking ƒë·ªÉ ƒë·∫°t band 7 tr·ªü l√™n v·ªõi ph∆∞∆°ng ph√°p hi·ªáu qu·∫£.", "Ngo·∫°i ng·ªØ", "60"}
            };

            for (int i = 0; i < courseData.length; i++) {
                String[] data = courseData[i];

                // T√¨m category theo t√™n
                Optional<Category> categoryOpt = categories.stream()
                        .filter(cat -> cat.getName().equals(data[2]))
                        .findFirst();

                if (categoryOpt.isPresent()) {
                    Course course = new Course();
                    course.setName(data[0]);
                    course.setDescription(data[1]);
                    course.setCategory(categoryOpt.get());
                    course.setInstructor(instructors.get(i % instructors.size()));
                    course.setEstimatedDuration(Integer.parseInt(data[3]));
                    course.setActive(true);
                    course.setFeatured(i < 6); // 6 kh√≥a h·ªçc ƒë·∫ßu ƒë∆∞·ª£c featured

                    // Set difficulty level
                    if (i % 3 == 0) {
                        course.setDifficultyLevel(Course.DifficultyLevel.BEGINNER);
                    } else if (i % 3 == 1) {
                        course.setDifficultyLevel(Course.DifficultyLevel.INTERMEDIATE);
                    } else {
                        course.setDifficultyLevel(Course.DifficultyLevel.ADVANCED);
                    }

                    courseRepository.save(course);
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o " + courseData.length + " kh√≥a h·ªçc m·∫´u");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o kh√≥a h·ªçc m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o b√†i gi·∫£ng m·∫´u
     */
    private void createSampleLessons() {
        System.out.println("üìñ T·∫°o b√†i gi·∫£ng m·∫´u...");

        try {
            List<Course> courses = courseRepository.findAll();

            if (courses.isEmpty()) {
                System.out.println("‚ö†Ô∏è Ch∆∞a c√≥ kh√≥a h·ªçc, b·ªè qua t·∫°o b√†i gi·∫£ng");
                return;
            }

            // T·∫°o 4-6 b√†i gi·∫£ng cho m·ªói kh√≥a h·ªçc
            for (Course course : courses) {
                if (lessonRepository.countByCourse(course) > 0) {
                    continue; // ƒê√£ c√≥ b√†i gi·∫£ng r·ªìi
                }

                String courseName = course.getName();
                String[][] lessonData;

                if (courseName.contains("Java")) {
                    lessonData = new String[][]{
                            {"Gi·ªõi thi·ªáu v·ªÅ Java", "T·ªïng quan v·ªÅ ng√¥n ng·ªØ l·∫≠p tr√¨nh Java, l·ªãch s·ª≠ ph√°t tri·ªÉn v√† ·ª©ng d·ª•ng trong th·ª±c t·∫ø.", "https://www.youtube.com/watch?v=eIrMbAQSU34"},
                            {"C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ph√°t tri·ªÉn", "H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t JDK, IDE v√† c√°c c√¥ng c·ª• c·∫ßn thi·∫øt ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫≠p tr√¨nh Java.", null},
                            {"Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu", "T√¨m hi·ªÉu v·ªÅ c√°c ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n trong Java v√† c√°ch khai b√°o, s·ª≠ d·ª•ng bi·∫øn.", "https://www.youtube.com/watch?v=YEhDbWaKAXM"},
                            {"C·∫•u tr√∫c ƒëi·ªÅu khi·ªÉn", "H·ªçc v·ªÅ c√¢u l·ªánh if-else, switch-case, v√≤ng l·∫∑p for, while trong Java.", null},
                            {"L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng", "Gi·ªõi thi·ªáu c√°c kh√°i ni·ªám OOP: Class, Object, Inheritance, Polymorphism.", "https://www.youtube.com/watch?v=Cr_U6DyWtWM"},
                            {"Exception Handling", "X·ª≠ l√Ω ngo·∫°i l·ªá trong Java v·ªõi try-catch-finally v√† custom exceptions.", null}
                    };
                } else if (courseName.contains("UI/UX")) {
                    lessonData = new String[][]{
                            {"Nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX", "T√¨m hi·ªÉu c√°c nguy√™n t·∫Øc c∆° b·∫£n trong thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.", null},
                            {"Gi·ªõi thi·ªáu Figma", "L√†m quen v·ªõi giao di·ªán v√† c√°c c√¥ng c·ª• c∆° b·∫£n c·ªßa Figma cho thi·∫øt k·∫ø UI/UX.", "https://www.youtube.com/watch?v=FTlczfBm7bk"},
                            {"Thi·∫øt k·∫ø Wireframe", "H·ªçc c√°ch t·∫°o wireframe v√† prototype cho ·ª©ng d·ª•ng web v√† mobile.", null},
                            {"Color Theory v√† Typography", "T√¨m hi·ªÉu v·ªÅ l√Ω thuy·∫øt m√†u s·∫Øc v√† c√°ch ch·ªçn font ch·ªØ ph√π h·ª£p.", null},
                            {"User Research", "Ph∆∞∆°ng ph√°p nghi√™n c·ª©u ng∆∞·ªùi d√πng v√† thu th·∫≠p feedback ƒë·ªÉ c·∫£i thi·ªán thi·∫øt k·∫ø.", null}
                    };
                } else if (courseName.contains("Python")) {
                    lessonData = new String[][]{
                            {"Python Basics", "C√∫ ph√°p c∆° b·∫£n c·ªßa Python, bi·∫øn, h√†m v√† c·∫•u tr√∫c d·ªØ li·ªáu.", "https://www.youtube.com/watch?v=_uQrJ0TkZlc"},
                            {"Pandas cho Data Analysis", "L√†m vi·ªác v·ªõi DataFrame v√† Series trong Pandas ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu.", null},
                            {"NumPy v√† t√≠nh to√°n khoa h·ªçc", "S·ª≠ d·ª•ng NumPy cho c√°c ph√©p t√≠nh to√°n s·ªë h·ªçc v√† m·∫£ng ƒëa chi·ªÅu.", null},
                            {"Matplotlib v√† Seaborn", "T·∫°o bi·ªÉu ƒë·ªì v√† visualization d·ªØ li·ªáu v·ªõi Matplotlib v√† Seaborn.", null},
                            {"Data Cleaning v√† Preprocessing", "K·ªπ thu·∫≠t l√†m s·∫°ch v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu cho machine learning.", null}
                    };
                } else {
                    // B√†i gi·∫£ng chung cho c√°c kh√≥a h·ªçc kh√°c
                    lessonData = new String[][]{
                            {"B√†i 1: Gi·ªõi thi·ªáu kh√≥a h·ªçc", "T·ªïng quan v·ªÅ n·ªôi dung, m·ª•c ti√™u v√† l·ªô tr√¨nh h·ªçc t·∫≠p c·ªßa kh√≥a h·ªçc.", null},
                            {"B√†i 2: Ki·∫øn th·ª©c c∆° b·∫£n", "Nh·ªØng ki·∫øn th·ª©c n·ªÅn t·∫£ng c·∫ßn thi·∫øt tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu h·ªçc chuy√™n s√¢u.", null},
                            {"B√†i 3: Th·ª±c h√†nh ƒë·∫ßu ti√™n", "B√†i t·∫≠p th·ª±c h√†nh ƒë·∫ßu ti√™n ƒë·ªÉ l√†m quen v·ªõi n·ªôi dung v√† c√¥ng c·ª•.", null},
                            {"B√†i 4: K·ªπ thu·∫≠t n√¢ng cao", "Ph√°t tri·ªÉn k·ªπ nƒÉng ·ªü m·ª©c ƒë·ªô n√¢ng cao v·ªõi c√°c v√≠ d·ª• th·ª±c t·∫ø.", null},
                            {"B√†i 5: D·ª± √°n th·ª±c h√†nh", "Th·ª±c hi·ªán d·ª± √°n nh·ªè ƒë·ªÉ √°p d·ª•ng ki·∫øn th·ª©c ƒë√£ h·ªçc.", null}
                    };
                }

                for (int i = 0; i < lessonData.length; i++) {
                    Lesson lesson = new Lesson();
                    lesson.setTitle(lessonData[i][0]);
                    lesson.setContent(lessonData[i][1]);
                    lesson.setVideoLink(lessonData[i][2]);
                    lesson.setCourse(course);
                    lesson.setOrderIndex(i + 1);
                    lesson.setActive(true);
                    lesson.setEstimatedDuration(30 + (i * 5)); // 30-55 ph√∫t
                    lesson.setPreview(i == 0); // B√†i ƒë·∫ßu cho preview mi·ªÖn ph√≠

                    lessonRepository.save(lesson);
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o b√†i gi·∫£ng m·∫´u cho t·∫•t c·∫£ kh√≥a h·ªçc");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o b√†i gi·∫£ng m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o quiz m·∫´u
     */
    private void createSampleQuizzes() {
        System.out.println("‚ùì T·∫°o quiz m·∫´u...");

        try {
            List<Course> courses = courseRepository.findAll();

            if (courses.isEmpty()) {
                System.out.println("‚ö†Ô∏è Ch∆∞a c√≥ kh√≥a h·ªçc, b·ªè qua t·∫°o quiz");
                return;
            }

            // T·∫°o 1-2 quiz cho m·ªói kh√≥a h·ªçc
            for (Course course : courses) {
                if (quizRepository.countByCourse(course) > 0) {
                    continue; // ƒê√£ c√≥ quiz r·ªìi
                }

                // T·∫°o quiz ch√≠nh
                Quiz quiz = new Quiz();
                quiz.setTitle("Ki·ªÉm tra " + course.getName());
                quiz.setDescription("B√†i ki·ªÉm tra ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ " + course.getName());
                quiz.setDuration(30); // 30 ph√∫t
                quiz.setMaxScore(100.0);
                quiz.setPassScore(60.0);
                quiz.setCourse(course);
                quiz.setActive(true);

                Quiz savedQuiz = quizRepository.save(quiz);

                // T·∫°o c√¢u h·ªèi cho quiz
                createQuestionsForQuiz(savedQuiz, course.getName());

                // T·∫°o quiz cu·ªëi kh√≥a (n·∫øu kh√≥a h·ªçc d√†i)
                if (course.getEstimatedDuration() != null && course.getEstimatedDuration() > 40) {
                    Quiz finalQuiz = new Quiz();
                    finalQuiz.setTitle("Ki·ªÉm tra cu·ªëi kh√≥a - " + course.getName());
                    finalQuiz.setDescription("B√†i ki·ªÉm tra t·ªïng h·ª£p ki·∫øn th·ª©c to√†n kh√≥a h·ªçc");
                    finalQuiz.setDuration(45); // 45 ph√∫t
                    finalQuiz.setMaxScore(100.0);
                    finalQuiz.setPassScore(70.0);
                    finalQuiz.setCourse(course);
                    finalQuiz.setActive(true);

                    Quiz savedFinalQuiz = quizRepository.save(finalQuiz);
                    createQuestionsForQuiz(savedFinalQuiz, course.getName() + "_advanced");
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o quiz m·∫´u cho t·∫•t c·∫£ kh√≥a h·ªçc");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o quiz m·∫´u: " + e.getMessage());
        }
    }

    /**
     * T·∫°o c√¢u h·ªèi cho quiz
     */
    private void createQuestionsForQuiz(Quiz quiz, String courseName) {
        String[][] questionData;

        if (courseName.contains("Java")) {
            questionData = new String[][]{
                    {"Ph∆∞∆°ng th·ª©c main trong Java c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?", "Private v√† static", "Public v√† dynamic", "Public v√† static", "Protected v√† final", "C"},
                    {"JVM vi·∫øt t·∫Øt c·ªßa c·ª•m t·ª´ n√†o?", "Java Virtual Machine", "Java Variable Method", "Java Version Manager", "Java Visual Mode", "A"},
                    {"Ki·ªÉu d·ªØ li·ªáu n√†o sau ƒë√¢y l√† ki·ªÉu nguy√™n th·ªßy trong Java?", "String", "ArrayList", "int", "Scanner", "C"},
                    {"T·ª´ kh√≥a n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k·∫ø th·ª´a trong Java?", "implements", "extends", "inherits", "super", "B"},
                    {"Ph∆∞∆°ng th·ª©c n√†o ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông khi t·∫°o object?", "main", "constructor", "finalize", "toString", "B"}
            };
        } else if (courseName.contains("UI/UX")) {
            questionData = new String[][]{
                    {"UX vi·∫øt t·∫Øt c·ªßa c·ª•m t·ª´ n√†o?", "User Experience", "User Extension", "Unique Experience", "Universal Extension", "A"},
                    {"Wireframe trong thi·∫øt k·∫ø UI/UX l√† g√¨?", "M√†u s·∫Øc c·ªßa giao di·ªán", "B·∫£n ph√°c th·∫£o khung giao di·ªán", "Font ch·ªØ ƒë∆∞·ª£c s·ª≠ d·ª•ng", "Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông", "B"},
                    {"Nguy√™n t·∫Øc n√†o quan tr·ªçng nh·∫•t trong thi·∫øt k·∫ø UI?", "M√†u s·∫Øc ƒë·∫πp", "Nhi·ªÅu hi·ªáu ·ª©ng", "D·ªÖ s·ª≠ d·ª•ng", "Font ch·ªØ l·∫°", "C"},
                    {"Figma l√† c√¥ng c·ª• d√πng ƒë·ªÉ l√†m g√¨?", "L·∫≠p tr√¨nh web", "Thi·∫øt k·∫ø giao di·ªán", "Qu·∫£n l√Ω d·ª± √°n", "Vi·∫øt vƒÉn b·∫£n", "B"}
            };
        } else if (courseName.contains("Python")) {
            questionData = new String[][]{
                    {"Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh g√¨?", "Compiled", "Interpreted", "Assembly", "Machine code", "B"},
                    {"Th∆∞ vi·ªán n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng cho Data Analysis?", "Pandas", "Tkinter", "Flask", "Django", "A"},
                    {"Ph∆∞∆°ng th·ª©c n√†o ƒë·ªÉ ƒë·ªçc file CSV trong Pandas?", "read_csv()", "load_csv()", "import_csv()", "open_csv()", "A"},
                    {"NumPy ch·ªß y·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?", "Web development", "T√≠nh to√°n khoa h·ªçc", "Game development", "Mobile app", "B"}
            };
        } else {
            // C√¢u h·ªèi chung
            questionData = new String[][]{
                    {"M·ª•c ti√™u ch√≠nh c·ªßa kh√≥a h·ªçc n√†y l√† g√¨?", "Gi·∫£i tr√≠", "H·ªçc ki·∫øn th·ª©c v√† k·ªπ nƒÉng m·ªõi", "Giao l∆∞u", "Thi ƒëua", "B"},
                    {"Th√°i ƒë·ªô h·ªçc t·∫≠p t·ªët nh·∫•t l√† g√¨?", "Th·ª• ƒë·ªông", "T√≠ch c·ª±c v√† ch·ªß ƒë·ªông", "Th·ªù ∆°", "M√°y m√≥c", "B"},
                    {"ƒêi·ªÅu quan tr·ªçng nh·∫•t khi h·ªçc online l√† g√¨?", "T·ª± gi√°c v√† k·ª∑ lu·∫≠t", "C√≥ m√°y t√≠nh ƒë·∫Øt", "H·ªçc nhi·ªÅu gi·ªù", "Ghi ch√©p nhi·ªÅu", "A"},
                    {"C√°ch t·ªët nh·∫•t ƒë·ªÉ ghi nh·ªõ ki·∫øn th·ª©c l√† g√¨?", "H·ªçc thu·ªôc l√≤ng", "Th·ª±c h√†nh th∆∞·ªùng xuy√™n", "Ch·ªâ ƒë·ªçc m·ªôt l·∫ßn", "Kh√¥ng c·∫ßn √¥n t·∫≠p", "B"}
            };
        }

        for (String[] data : questionData) {
            Question question = new Question();
            question.setQuestionText(data[0]);
            question.setOptionA(data[1]);
            question.setOptionB(data[2]);
            question.setOptionC(data[3]);
            question.setOptionD(data[4]);
            question.setCorrectOption(data[5]);
            question.setExplanation("ƒê√¢y l√† ƒë√°p √°n ƒë√∫ng d·ª±a tr√™n n·ªôi dung ƒë√£ h·ªçc trong kh√≥a h·ªçc.");
            question.setQuiz(quiz);
            question.setPoints(2.0);

            questionRepository.save(question);
        }
    }

    /**
     * T·∫°o enrollment m·∫´u
     */
    private void createSampleEnrollments() {
        System.out.println("üéØ T·∫°o enrollment m·∫´u...");

        try {
            List<User> students = userRepository.findByRole(User.Role.STUDENT);
            List<Course> courses = courseRepository.findAll();

            if (students.isEmpty() || courses.isEmpty()) {
                System.out.println("‚ö†Ô∏è Ch∆∞a c√≥ h·ªçc vi√™n ho·∫∑c kh√≥a h·ªçc, b·ªè qua t·∫°o enrollment");
                return;
            }

            // M·ªói h·ªçc vi√™n ƒëƒÉng k√Ω 2-4 kh√≥a h·ªçc ng·∫´u nhi√™n
            for (User student : students) {
                int enrollmentCount = 2 + (int) (Math.random() * 3); // 2-4 kh√≥a h·ªçc

                for (int i = 0; i < enrollmentCount && i < courses.size(); i++) {
                    Course course = courses.get((int) (Math.random() * courses.size()));

                    // Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω ch∆∞a
                    if (enrollmentRepository.existsByStudentAndCourse(student, course)) {
                        continue;
                    }

                    Enrollment enrollment = new Enrollment(student, course);

                    // Random ti·∫øn ƒë·ªô h·ªçc t·∫≠p
                    double progress = Math.random() * 100;
                    enrollment.setProgressPercentage(progress);

                    // Random study hours
                    enrollment.setStudyHours(Math.random() * 20);

                    // N·∫øu ho√†n th√†nh tr√™n 80% th√¨ mark l√† completed
                    if (progress > 80) {
                        enrollment.complete();
                        enrollment.setHighestScore(60 + Math.random() * 40); // 60-100 ƒëi·ªÉm
                    }

                    enrollmentRepository.save(enrollment);
                }
            }

            System.out.println("‚úÖ ƒê√£ t·∫°o enrollment m·∫´u cho h·ªçc vi√™n");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o enrollment m·∫´u: " + e.getMessage());
        }
    }
}