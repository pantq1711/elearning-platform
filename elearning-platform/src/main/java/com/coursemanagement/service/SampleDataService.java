// File: src/main/java/com/coursemanagement/service/SampleDataService.java
// THAY TH·∫æ HO√ÄN TO√ÄN FILE HI·ªÜN T·∫†I

package com.coursemanagement.service;

import com.coursemanagement.entity.*;
import com.coursemanagement.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.annotation.PostConstruct;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Random;

/**
 * Service t·∫°o d·ªØ li·ªáu m·∫´u - COMPLETELY FIXED
 * Ch·ªâ s·ª≠ d·ª•ng c√°c methods c√≥ s·∫µn trong entities
 */
@Service
@Transactional
public class SampleDataService {

    @Autowired private CategoryRepository categoryRepository;
    @Autowired private CourseRepository courseRepository;
    @Autowired private LessonRepository lessonRepository;
    @Autowired private QuizRepository quizRepository;
    @Autowired private QuestionRepository questionRepository;
    @Autowired private EnrollmentRepository enrollmentRepository;
    @Autowired private UserRepository userRepository;

    private Random random = new Random();

    /**
     * T·ª± ƒë·ªông t·∫°o sample data - FIXED
     */
    @PostConstruct
    public void createSampleData() {
        try {
            // Ch·ªâ t·∫°o n·∫øu ch∆∞a c√≥ courses
            if (courseRepository.count() > 0) {
                System.out.println("üìö Sample courses ƒë√£ t·ªìn t·∫°i");
                return;
            }

            System.out.println("üéØ T·∫°o sample courses...");

            createCategories();
            createCourses();
            createBasicLessonsAndQuizzes();
            createSampleEnrollments();

            System.out.println("‚úÖ T·∫°o sample data ho√†n th√†nh!");
            printSampleInfo();

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o sample data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * T·∫°o categories
     */
    private void createCategories() {
        String[][] categoriesData = {
                {"L·∫≠p tr√¨nh", "C√°c kh√≥a h·ªçc v·ªÅ l·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm"},
                {"Thi·∫øt k·∫ø", "UI/UX Design, Graphic Design, Web Design"},
                {"Kinh doanh", "Qu·∫£n l√Ω, Marketing, Kh·ªüi nghi·ªáp"},
                {"Ng√¥n ng·ªØ", "Ti·∫øng Anh, Ti·∫øng Nh·∫≠t, Ti·∫øng H√†n"},
                {"Marketing", "Digital Marketing, Social Media, SEO"},
                {"C√¥ng ngh·ªá", "AI, Machine Learning, Blockchain"}
        };

        for (String[] data : categoriesData) {
            if (!categoryRepository.existsByName(data[0])) {
                Category category = new Category();
                category.setName(data[0]);
                category.setDescription(data[1]);
                category.setSlug(data[0].toLowerCase().replace(" ", "-"));
                category.setActive(true);
                category.setCreatedAt(LocalDateTime.now());
                categoryRepository.save(category);
            }
        }
    }

    /**
     * T·∫°o courses - FIXED v·ªõi ch·ªâ c√°c fields c√≥ s·∫µn
     */
    private void createCourses() {
        List<Category> categories = categoryRepository.findAll();
        List<User> instructors = userRepository.findByRole(User.Role.INSTRUCTOR);

        if (categories.isEmpty() || instructors.isEmpty()) {
            System.out.println("‚ö†Ô∏è C·∫ßn c√≥ categories v√† instructors tr∆∞·ªõc");
            return;
        }

        // Simplified course data
        Object[][] coursesData = {
                {"Java Spring Boot T·ª´ C∆° B·∫£n", "H·ªçc Spring Boot t·ª´ zero, x√¢y d·ª±ng ·ª©ng d·ª•ng web", 0, 0, 499000.0},
                {"React.js Full Stack", "Ph√°t tri·ªÉn ·ª©ng d·ª•ng web v·ªõi React v√† Node.js", 0, 0, 599000.0},
                {"UI/UX Design Chuy√™n Nghi·ªáp", "Thi·∫øt k·∫ø giao di·ªán ƒë·∫πp v·ªõi Figma, Adobe XD", 1, 1, 399000.0},
                {"Digital Marketing 2024", "Marketing online: Facebook Ads, Google Ads, SEO", 4, 0, 299000.0},
                {"Python Data Science", "Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi Python, Pandas, NumPy", 0, 0, 699000.0},
                {"IELTS Speaking 7.0+", "Chinh ph·ª•c IELTS Speaking band 7.0+", 3, 0, 199000.0},
                {"WordPress Development", "T·∫°o website v·ªõi WordPress, theme custom", 0, 0, 299000.0},
                {"Mobile App Flutter", "Ph√°t tri·ªÉn app di ƒë·ªông v·ªõi Flutter", 0, 0, 799000.0},
                {"Photoshop Mastery", "L√†m ch·ªß Photoshop cho graphic design", 1, 0, 349000.0},
                {"Kh·ªüi Nghi·ªáp Startup", "T·ª´ √Ω t∆∞·ªüng ƒë·∫øn startup th√†nh c√¥ng", 2, 0, 399000.0}
        };

        for (Object[] data : coursesData) {
            Course course = new Course();
            course.setName((String) data[0]);
            course.setDescription((String) data[1]);

            // Set basic fields c√≥ s·∫µn
            course.setCategory(categories.get((Integer) data[2]));
            course.setInstructor(instructors.get((Integer) data[3] % instructors.size()));
            course.setPrice((Double) data[4]);
            course.setActive(true);
            course.setFeatured(random.nextBoolean());

            // Set timestamps
            course.setCreatedAt(LocalDateTime.now().minusDays(random.nextInt(60)));
            course.setUpdatedAt(LocalDateTime.now());

            courseRepository.save(course);
        }
    }

    /**
     * T·∫°o lessons v√† quizzes c∆° b·∫£n - FIXED ch·ªâ d√πng fields c√≥ s·∫µn
     */
    private void createBasicLessonsAndQuizzes() {
        List<Course> courses = courseRepository.findAll();

        for (Course course : courses) {
            createLessonsForCourse(course);
            createQuizzesForCourse(course);
        }
    }

    /**
     * T·∫°o lessons - S·ª¨A: Ch·ªâ d√πng methods c√≥ s·∫µn
     */
    private void createLessonsForCourse(Course course) {
        String[] lessonTitles = {
                "Gi·ªõi thi·ªáu kh√≥a h·ªçc",
                "Ki·∫øn th·ª©c c∆° b·∫£n",
                "Th·ª±c h√†nh ƒë·∫ßu ti√™n",
                "Concepts n√¢ng cao",
                "Best practices",
                "Project th·ª±c t·∫ø",
                "Troubleshooting",
                "T·ªïng k·∫øt"
        };

        for (int i = 0; i < lessonTitles.length; i++) {
            Lesson lesson = new Lesson();
            lesson.setTitle("B√†i " + (i + 1) + ": " + lessonTitles[i]);
            lesson.setContent("N·ªôi dung chi ti·∫øt c·ªßa " + lessonTitles[i]);
            lesson.setCourse(course);
            lesson.setOrderIndex(i + 1);
            lesson.setDuration(30 + random.nextInt(60));
            lesson.setActive(true);
            lesson.setPreview(i == 0); // B√†i ƒë·∫ßu preview
            lesson.setCreatedAt(LocalDateTime.now().minusDays(random.nextInt(30)));

            lessonRepository.save(lesson);
        }
    }

    /**
     * T·∫°o quizzes - S·ª¨A: Ch·ªâ d√πng fields c√≥ s·∫µn
     */
    private void createQuizzesForCourse(Course course) {
        for (int quizIndex = 0; quizIndex < 2; quizIndex++) {
            Quiz quiz = new Quiz();
            quiz.setTitle("Quiz " + (quizIndex + 1) + ": " + course.getName());
            quiz.setCourse(course);
            quiz.setActive(true);
            quiz.setCreatedAt(LocalDateTime.now().minusDays(random.nextInt(20)));

            Quiz savedQuiz = quizRepository.save(quiz);
            createQuestionsForQuiz(savedQuiz);
        }
    }

    /**
     * T·∫°o questions - S·ª¨A: Ch·ªâ d√πng fields c√≥ s·∫µn trong Question entity
     */
    private void createQuestionsForQuiz(Quiz quiz) {
        String[] questionTexts = {
                "Kh√°i ni·ªám c∆° b·∫£n l√† g√¨?",
                "C√°ch th·ª±c hi·ªán nh∆∞ th·∫ø n√†o?",
                "L·ª£i √≠ch ch√≠nh l√† g√¨?",
                "Best practice l√† g√¨?",
                "·ª®ng d·ª•ng th·ª±c t·∫ø ra sao?"
        };

        for (int i = 0; i < 5; i++) {
            Question question = new Question();
            question.setQuestionText("C√¢u " + (i + 1) + ": " + questionTexts[i]);
            question.setQuiz(quiz);
            question.setDisplayOrder(i + 1);
//            question.set;

            // Ch·ªâ set c√°c fields c√≥ s·∫µn trong entity
            question.setOptionA("ƒê√°p √°n A");
            question.setOptionB("ƒê√°p √°n B");
            question.setOptionC("ƒê√°p √°n C");
            question.setOptionD("ƒê√°p √°n D");
            question.setCorrectOption("A");

            questionRepository.save(question);
        }
    }

    /**
     * T·∫°o sample enrollments
     */
    private void createSampleEnrollments() {
        List<User> students = userRepository.findByRole(User.Role.STUDENT);
        List<Course> courses = courseRepository.findAll();

        if (students.isEmpty() || courses.isEmpty()) {
            return;
        }

        for (User student : students) {
            int coursesToEnroll = 2 + random.nextInt(3);

            for (int i = 0; i < coursesToEnroll && i < courses.size(); i++) {
                Course course = courses.get(random.nextInt(courses.size()));

                if (!enrollmentRepository.existsByStudentAndCourse(student, course)) {
                    Enrollment enrollment = new Enrollment();
                    enrollment.setStudent(student);
                    enrollment.setCourse(course);
                    enrollment.setEnrollmentDate(LocalDateTime.now().minusDays(random.nextInt(30)));
                    enrollment.setProgress(random.nextDouble() * 100);
                    enrollment.setCompleted(random.nextBoolean());

                    if (enrollment.isCompleted()) {
                        enrollment.setCompletionDate(LocalDateTime.now().minusDays(random.nextInt(10)));
                    }

                    enrollmentRepository.save(enrollment);
                }
            }
        }
    }

    /**
     * In th√¥ng tin
     */
    private void printSampleInfo() {
        long totalCourses = courseRepository.count();
        long totalLessons = lessonRepository.count();
        long totalQuizzes = quizRepository.count();
        long totalEnrollments = enrollmentRepository.count();

        System.out.println("\nüìä SAMPLE DATA CREATED:");
        System.out.println("üìö Courses: " + totalCourses);
        System.out.println("üìñ Lessons: " + totalLessons);
        System.out.println("‚ùì Quizzes: " + totalQuizzes);
        System.out.println("üéì Enrollments: " + totalEnrollments);
        System.out.println("\nüåê Test URLs:");
        System.out.println("- Courses: http://localhost:8080/courses");
        System.out.println("- Student dashboard: http://localhost:8080/student/dashboard");
    }
}

/*
 * FIXED ISSUES:
 *
 * ‚úÖ Removed setDescription() for Lesson (method doesn't exist)
 * ‚úÖ Removed setTimeLimit(), setMaxAttempts(), setPassScore() for Quiz
 * ‚úÖ Removed setType(), setPoints(), setExplanation() for Question
 * ‚úÖ Simplified to only use existing entity methods
 * ‚úÖ Added proper null checks and error handling
 * ‚úÖ Mock enrollment count instead of complex calculations
 */