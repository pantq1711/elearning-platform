package com.coursemanagement;

import com.coursemanagement.entity.Category;
import com.coursemanagement.entity.User;
import com.coursemanagement.service.CategoryService;
import com.coursemanagement.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.time.LocalDateTime;

/**
 * Main class ƒë·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng Course Management System
 * T·ª± ƒë·ªông t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh khi kh·ªüi ƒë·ªông
 * S·ª¨A L·ªñI CIRCULAR DEPENDENCY: S·ª≠ d·ª•ng ApplicationContext thay v√¨ direct injection
 */
@SpringBootApplication
public class CourseManagementApplication implements CommandLineRunner {

    // S·ª¨A L·ªñI: S·ª≠ d·ª•ng ApplicationContext ƒë·ªÉ tr√°nh circular dependency
    @Autowired
    private ApplicationContext applicationContext;

    public static void main(String[] args) {
        SpringApplication.run(CourseManagementApplication.class, args);
    }

    /**
     * Ch·∫°y c√°c initialization tasks sau khi application start
     * @param args Command line arguments
     * @throws Exception N·∫øu c√≥ l·ªói initialization
     */
    @Override
    public void run(String... args) throws Exception {
        System.out.println("üöÄ Course Management System ƒëang kh·ªüi ƒë·ªông...");

        // ‚úÖ L·∫•y beans t·ª´ ApplicationContext khi c·∫ßn
        createDefaultAdminIfNotExists();
        createDefaultCategoriesIfNotExists();

        System.out.println("‚úÖ Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh ho√†n t·∫•t!");
        System.out.println("üìö H·ªá th·ªëng qu·∫£n l√Ω kh√≥a h·ªçc ƒë√£ s·∫µn s√†ng!");
        System.out.println("üåê Truy c·∫≠p: http://localhost:8080");
        System.out.println("üë§ Admin: admin / admin123");
    }

    /**
     * T·∫°o admin m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a t·ªìn t·∫°i
     */
    private void createDefaultAdminIfNotExists() {
        try {
            // ‚úÖ L·∫•y UserService t·ª´ ApplicationContext
            UserService userService = applicationContext.getBean(UserService.class);
            PasswordEncoder passwordEncoder = applicationContext.getBean(PasswordEncoder.class);

            // Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
            if (userService.findByUsername("admin").isEmpty()) {
                System.out.println("üìù T·∫°o admin m·∫∑c ƒë·ªãnh...");

                User admin = new User();
                admin.setUsername("admin");
                admin.setEmail("admin@coursemanagement.com");
                admin.setFullName("System Administrator");
                admin.setPassword(passwordEncoder.encode("admin123"));
                admin.setRole(User.Role.ADMIN);
                admin.setActive(true);
                admin.setCreatedAt(LocalDateTime.now());
                admin.setUpdatedAt(LocalDateTime.now());

                userService.createUser(admin);
                System.out.println("‚úÖ ƒê√£ t·∫°o admin m·∫∑c ƒë·ªãnh: admin / admin123");
            } else {
                System.out.println("‚ÑπÔ∏è Admin ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o m·ªõi");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi t·∫°o admin m·∫∑c ƒë·ªãnh: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * T·∫°o categories m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a t·ªìn t·∫°i
     */
    private void createDefaultCategoriesIfNotExists() {
        try {
            // ‚úÖ L·∫•y CategoryService t·ª´ ApplicationContext
            CategoryService categoryService = applicationContext.getBean(CategoryService.class);

            // Ki·ªÉm tra xem ƒë√£ c√≥ categories ch∆∞a
            if (categoryService.countAll() == 0) {
                System.out.println("üìù T·∫°o categories m·∫∑c ƒë·ªãnh...");

                // T·∫°o c√°c categories m·∫∑c ƒë·ªãnh
                String[] categoryNames = {
                        "L·∫≠p tr√¨nh", "Thi·∫øt k·∫ø", "Kinh doanh", "Marketing",
                        "Ng√¥n ng·ªØ", "Khoa h·ªçc", "To√°n h·ªçc", "Ngh·ªá thu·∫≠t"
                };

                String[] categorySlugs = {
                        "lap-trinh", "thiet-ke", "kinh-doanh", "marketing",
                        "ngon-ngu", "khoa-hoc", "toan-hoc", "nghe-thuat"
                };

                String[] categoryDescriptions = {
                        "C√°c kh√≥a h·ªçc v·ªÅ l·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm",
                        "Thi·∫øt k·∫ø ƒë·ªì h·ªça, UI/UX v√† thi·∫øt k·∫ø web",
                        "Qu·∫£n tr·ªã kinh doanh v√† kh·ªüi nghi·ªáp",
                        "Digital marketing v√† qu·∫£ng c√°o",
                        "H·ªçc ngo·∫°i ng·ªØ v√† giao ti·∫øp",
                        "Khoa h·ªçc t·ª± nhi√™n v√† c√¥ng ngh·ªá",
                        "To√°n h·ªçc v√† th·ªëng k√™",
                        "Ngh·ªá thu·∫≠t v√† s√°ng t·∫°o"
                };

                for (int i = 0; i < categoryNames.length; i++) {
                    Category category = new Category();
                    category.setName(categoryNames[i]);
                    category.setSlug(categorySlugs[i]);
                    category.setDescription(categoryDescriptions[i]);
                    category.setActive(true);
                    category.setCreatedAt(LocalDateTime.now());
                    category.setUpdatedAt(LocalDateTime.now());

                    categoryService.createCategory(category);
                }

                System.out.println("‚úÖ ƒê√£ t·∫°o " + categoryNames.length + " categories m·∫∑c ƒë·ªãnh");
            } else {
                System.out.println("‚ÑπÔ∏è Categories ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o m·ªõi");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi t·∫°o categories m·∫∑c ƒë·ªãnh: " + e.getMessage());
            e.printStackTrace();
        }
    }
}